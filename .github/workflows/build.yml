name: Build
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - ci/*
      - develop
      - uat
      - main

jobs:
  secret-detection:
    name: Secret detection
    runs-on: 
      - self-hosted
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3

      - name: Setup Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          # experimental version of slim-detect-secrets
          pip install git+https://github.com/NASA-AMMOS/slim-detect-secrets.git@exp
          pip install jq

      - name: Create baseline config
        run: |
          # scripts to check baseline config
          if [ ! -f .secrets.baseline ] ; 
          then
              # This generated baseline file will only be temporarily available on the GitHub side and will not appear in the user's local files.
              # Scanning an empty folder to generate an initial .secrets.baseline without secrets in the results.
              echo "⚠️ No existing .secrets.baseline file detected. Creating a new blank baseline file."
              mkdir empty-dir
              detect-secrets scan empty-dir > .secrets.baseline
              echo "✅ Blank .secrets.baseline file created successfully."
              rm -r empty-dir
          else
              echo "✅ Existing .secrets.baseline file detected. No new baseline file will be created."
          fi
          
      - name: Scan repository
        run: |
          # scripts to scan repository for new secrets
          
          # backup the list of known secrets
          cp .secrets.baseline .secrets.new

          # find the secrets in the repository
          detect-secrets scan --disable-plugin AbsolutePathDetectorExperimental --baseline .secrets.new \
            --exclude-files '\.secrets.*' \
            --exclude-files '\.git.*' \
            --exclude-files '\.mypy_cache' \
            --exclude-files '\.pytest_cache' \
            --exclude-files '\.tox' \
            --exclude-files 'dist' \
            --exclude-files 'build' \
            --exclude-files '.pre-*' \
            --exclude-files '.*\.egg-info'
            
          # break build when new secrets discovered
          # function compares baseline/new secrets w/o listing results -- success(0) when new secret found
          compare_secrets() { diff <(jq -r '.results | keys[] as $key | "\($key),\(.[$key] | .[] | .hashed_secret)"' "${1}" | sort) <(jq -r '.results | keys[] as $key | "\($key),\(.[$key] | .[] | .hashed_secret)"' "${2}" | sort) | grep -q '>' ; }
        
          # Check if there's any difference between the known and newly detected secrets
          if compare_secrets .secrets.baseline .secrets.new; 
          then
            echo "⚠️ Attention Required! ⚠️" >&2
            echo "New secrets have been detected in your recent commit. Due to security concerns, we cannot display detailed information here and we cannot proceed until this issue is resolved." >&2
            echo "" >&2
            echo "Please follow the steps below on your local machine to reveal and handle the secrets:" >&2
            echo "" >&2
            echo "1️⃣ Run the 'detect-secrets' tool on your local machine. This tool will identify and clean up the secrets. You can find detailed instructions at this link: https://nasa-ammos.github.io/slim/docs/guides/software-lifecycle/security/secrets-detection" >&2
            echo "" >&2
            echo "2️⃣ After cleaning up the secrets, commit your changes and re-push your update to the repository." >&2
            echo "" >&2
            echo "Your efforts to maintain the security of our codebase are greatly appreciated!" >&2
            exit 1
          else
            echo "🟢 Secrets tests PASSED! 🟢" >&1
            echo "No new secrets were detected in comparison to any baseline configurations."  >&1
            exit 0
          fi
